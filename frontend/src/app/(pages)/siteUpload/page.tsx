// @ts-nocheck
"use client";
import Header from "@/components/local/Header";
import toggleButton from "../../../json/toggleButtons.json";
import { useState } from "react";
import toast from "react-hot-toast";
import useUploadFiles from "@/hooks/useUploadFile";

const Page = () => {
  const [data, setData] = useState([]);
  const [name, setName] = useState();
  const { loading, upload } = useUploadFiles();

  const addItem = () => {
    if (data.length === 80) {
      return toast.error("Only 80 images can be uploaded");
    }
    setData([...data, [null, ""]]);
  };

  const handleImage = (index, file) => {
    setData((prevData) =>
      prevData.map((item, i) => (i === index ? [file, item[1]] : item))
    );
  };

  const handleCategory = (index, category) => {
    setData((prevData) =>
      prevData.map((item, i) => (i === index ? [item[0], category] : item))
    );
  };

  const create = () => {
    if (!name) {
      toast.error("Enter site name");
    }
    upload(name, data);
  };

  return (
    <>
      <Header />
      <div className="flex bg-[url('/bg.jpg')] bg-cover bg-fixed bg-no-repeat overflow-auto w-screen justify-center items-center pl-[80px] pr-[80px] min-h-screen">
        <div className="mt-[120px]">
          <div className="flex flex-col gap-2">
            <label className="input input-bordered flex items-center gap-2">
              <svg
                id="Name_Tag_Woman_Horizontal_24"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                xmlnsXlink="http://www.w3.org/1999/xlink"
              >
                <rect
                  width="24"
                  height="24"
                  stroke="none"
                  fill="#000000"
                  opacity="0"
                />
                <g transform="matrix(0.43 0 0 0.43 12 12)">
                  <path
                    transform=" translate(-25, -23.5)"
                    d="M 23 4 C 21.904545 4 21 4.9045455 21 6 L 21 11 L 6.6679688 11 C 4.1228041 11 2 13.018641 2 15.529297 L 2 38.470703 C 2 40.981359 4.1228041 43 6.6679688 43 L 43.332031 43 C 45.877196 43 48 40.982071 48 38.470703 L 48 15.529297 C 48 13.018641 45.878406 11 43.333984 11 L 30 11 L 30 6 C 30 4.9045455 29.095455 4 28 4 L 23 4 z M 23 6 L 28 6 L 28 11.832031 C 27.98215095194716 11.940022437464606 27.98215095194716 12.050211562535395 28 12.158203 L 28 14 L 23 14 L 23 12.167969 C 23.01784904805284 12.059977562535394 23.01784904805284 11.949788437464607 23 11.841797 L 23 6 z M 6.6679688 13 L 21 13 L 21 14 C 21 15.095455 21.904545 16 23 16 L 28 16 C 29.095455 16 30 15.095455 30 14 L 30 13 L 43.333984 13 C 44.837563 13 46 14.141952 46 15.529297 L 46 38.470703 C 46 39.859336 44.836867 41 43.332031 41 L 6.6679688 41 C 5.1631334 41 4 39.858048 4 38.470703 L 4 15.529297 C 4 14.141952 5.1631334 13 6.6679688 13 z M 15.421875 18 C 13.558803 18 12.128943 18.683244 11.244141 19.740234 C 10.359338 20.797224 9.9991474 22.110636 9.8105469 23.373047 C 9.6219464 24.635458 9.6084428 25.882556 9.546875 26.84375 C 9.5160911 27.324347 9.4724845 27.732471 9.4121094 28 C 9.3517343 28.267529 9.259315 28.351923 9.3339844 28.285156 C 9.121968567795316 28.474471955765054 9.000523827175746 28.7450594764079 9 29.029297 C 9 29.496111 9.2621358 29.961006 9.5605469 30.220703 C 9.858958 30.480401 10.176001 30.614883 10.509766 30.726562 C 10.750597 30.807143 11.086929 30.830266 11.357422 30.886719 C 11.318272 30.907739 11.337059 30.91571 11.292969 30.9375 C 10.812156 31.175124 10.11725 31.41205 9.3828125 31.728516 C 8.6483715 32.044982 7.858593 32.4481 7.2011719 33.121094 C 6.5437508 33.794088 6.0664973 34.762105 6.0019531 35.945312 C 5.986963541607492 36.219523660943665 6.085391672095968 36.487834199685466 6.274148052207113 36.68730287097402 C 6.462904432318257 36.88677154226258 6.725378992016599 36.99984562232752 7 37 L 23 37 C 23.27462102536208 36.999845649776276 23.53709561138158 36.88677158171252 23.72585201340482 36.68730290725422 C 23.91460841542806 36.48783423279592 24.013036559324807 36.219523678281874 23.998047 35.945312 C 23.933547 34.763005 23.458341 33.794805 22.802734 33.121094 C 22.147128 32.447383 21.358715 32.043578 20.625 31.724609 C 19.891285 31.405641 19.19582 31.164835 18.710938 30.921875 C 18.689397 30.911085 18.698134 30.907114 18.677734 30.896484 C 19.106233 30.818224 19.563808 30.778084 19.943359 30.673828 C 20.370614 30.55647 20.749201 30.432239 21.09375 30.251953 C 21.266025 30.161813 21.43275 30.060545 21.607422 29.886719 C 21.782089 29.712891 22 29.409711 22 28.988281 C 22.000318257660012 28.707593682915423 21.882668268138758 28.439692196840454 21.675781 28.25 C 21.752821 28.32052 21.671877 28.2559 21.617188 28.021484 C 21.562507 27.787065 21.519198 27.421943 21.488281 26.992188 C 21.426441 26.132675 21.406521 25.012058 21.224609 23.873047 C 21.042697 22.734036 20.70141 21.54066 19.871094 20.578125 C 19.15962 19.753356 18.018996 19.269258 16.648438 19.123047 L 16.287109 18.498047 C 16.108107295504812 18.18965727855097 15.778450125933658 17.9998996357244 15.421875 18 z M 26 20 L 26 22 L 44 22 L 44 20 L 26 20 z M 14.894531 20.087891 L 15.134766 20.501953 C 15.31376770449519 20.810342721449025 15.643424874066342 21.000100364275596 16 21 C 17.278577 21 17.900175 21.354707 18.357422 21.884766 C 18.814669 22.414824 19.09766 23.235589 19.25 24.189453 C 19.40234 25.143317 19.426416 26.193434 19.494141 27.134766 C 19.528001 27.605431 19.570631 28.048923 19.669922 28.474609 C 19.682022 28.526469 19.73622 28.574639 19.75 28.626953 C 19.629258 28.669483 19.568747 28.703603 19.414062 28.746094 C 18.721321 28.936377 17.756433 29.101833 16.90625 29.181641 C 16.62439820534471 29.208261464273296 16.367033987768014 29.353091082524216 16.19800537878538 29.580199894801346 C 16.028976769802746 29.807308707078477 15.964122173696088 30.095416048490346 16.019531 30.373047 C 16.041731 30.48508 16.042969 30.5595 16.042969 30.6875 C 16.042696818801808 30.808919800058487 16.064537413525866 30.929374307466457 16.107422 31.042969 C 16.431506 31.896789 17.144118 32.375053 17.814453 32.710938 C 18.484788 33.046821 19.193465 33.282688 19.828125 33.558594 C 20.462785 33.8345 21.006278 34.142742 21.369141 34.515625 C 21.483346 34.632984 21.482546 34.865321 21.568359 35 L 8.4316406 35 C 8.5175116 34.86589 8.5166696 34.634473 8.6308594 34.517578 C 8.994532 34.145291 9.5418445 33.839566 10.175781 33.566406 C 10.809718 33.293246 11.513156 33.059876 12.179688 32.730469 C 12.846219 32.401061 13.563205 31.93089 13.876953 31.074219 C 13.901073246115692 31.007844337123544 13.91809520121848 30.939101529605583 13.927734 30.869141 C 13.975214 30.532262 13.978516 30.305734 13.978516 30.177734 C 13.979110636022629 29.67106652496392 13.600709749665192 29.244002681488926 13.097656 29.183594 C 12.239923 29.080743 11.540089 28.958226 11.158203 28.832031 C 11.202533 28.696734 11.330867 28.576384 11.361328 28.441406 C 11.465406 27.980224 11.509565 27.4922 11.542969 26.970703 C 11.609779 25.92771 11.62766 24.748308 11.789062 23.667969 C 11.950463 22.58763 12.260271 21.641134 12.777344 21.023438 C 13.212408 20.503708 13.878681 20.192144 14.894531 20.087891 z M 26 24 L 26 26 L 40 26 L 40 24 L 26 24 z M 26 28 L 26 30 L 37 30 L 37 28 L 26 28 z M 26 32 L 26 34 L 40 34 L 40 32 L 26 32 z"
                    strokeLinecap="round"
                  />
                </g>
              </svg>
              <input
                type="text"
                className="grow"
                placeholder="Site name"
                onChange={(e) => {
                  setName(e.target.value);
                }}
              />
            </label>
            <div className="flex justify-center items-center flex-wrap max-w-[1000px] gap-4">
              {data.map((item, index) => (
                <div key={index} className="flex flex-col gap-2">
                  <input
                    type="file"
                    className="file-input file-input-bordered w-full max-w-xs"
                    onChange={(e) => handleImage(index, e.target.files[0])}
                  />
                  <select
                    className="select select-bordered w-full max-w-xs"
                    value={item[1]}
                    onChange={(e) => handleCategory(index, e.target.value)}
                  >
                    <option disabled value="">
                      Category
                    </option>
                    {toggleButton.items.map((category, i) => (
                      <option key={i} value={category}>
                        {category}
                      </option>
                    ))}
                  </select>
                </div>
              ))}

              <button className="btn btn-circle" onClick={addItem}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6 rotate-45"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>

            {loading ? (
              <button className="btn">
                <span className="loading loading-ring loading-lg"></span>
              </button>
            ) : (
              <button className="btn" onClick={create}>
                Create
              </button>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Page;
